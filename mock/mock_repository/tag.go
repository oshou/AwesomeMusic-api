// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/tag.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/oshou/AwesomeMusic-api/domain/model"
	reflect "reflect"
)

// MockITagRepository is a mock of ITagRepository interface
type MockITagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITagRepositoryMockRecorder
}

// MockITagRepositoryMockRecorder is the mock recorder for MockITagRepository
type MockITagRepositoryMockRecorder struct {
	mock *MockITagRepository
}

// NewMockITagRepository creates a new mock instance
func NewMockITagRepository(ctrl *gomock.Controller) *MockITagRepository {
	mock := &MockITagRepository{ctrl: ctrl}
	mock.recorder = &MockITagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITagRepository) EXPECT() *MockITagRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockITagRepository) GetAll() ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockITagRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockITagRepository)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockITagRepository) GetByID(tagID int) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", tagID)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockITagRepositoryMockRecorder) GetByID(tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITagRepository)(nil).GetByID), tagID)
}

// GetByName mocks base method
func (m *MockITagRepository) GetByName(tagName string) ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", tagName)
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockITagRepositoryMockRecorder) GetByName(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockITagRepository)(nil).GetByName), tagName)
}

// GetByPostID mocks base method
func (m *MockITagRepository) GetByPostID(postID int) ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostID", postID)
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID
func (mr *MockITagRepositoryMockRecorder) GetByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockITagRepository)(nil).GetByPostID), postID)
}

// Add mocks base method
func (m *MockITagRepository) Add(tagName string) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tagName)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockITagRepositoryMockRecorder) Add(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockITagRepository)(nil).Add), tagName)
}

// Attach mocks base method
func (m *MockITagRepository) Attach(postID, tagID int) (*model.PostTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", postID, tagID)
	ret0, _ := ret[0].(*model.PostTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach
func (mr *MockITagRepositoryMockRecorder) Attach(postID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockITagRepository)(nil).Attach), postID, tagID)
}
