// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/search_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/oshou/AwesomeMusic-api/domain/model"
	reflect "reflect"
)

// MockISearchRepository is a mock of ISearchRepository interface
type MockISearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISearchRepositoryMockRecorder
}

// MockISearchRepositoryMockRecorder is the mock recorder for MockISearchRepository
type MockISearchRepositoryMockRecorder struct {
	mock *MockISearchRepository
}

// NewMockISearchRepository creates a new mock instance
func NewMockISearchRepository(ctrl *gomock.Controller) *MockISearchRepository {
	mock := &MockISearchRepository{ctrl: ctrl}
	mock.recorder = &MockISearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISearchRepository) EXPECT() *MockISearchRepositoryMockRecorder {
	return m.recorder
}

// GetByTitle mocks base method
func (m *MockISearchRepository) GetByTitle(q string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", q)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle
func (mr *MockISearchRepositoryMockRecorder) GetByTitle(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockISearchRepository)(nil).GetByTitle), q)
}

// GetByUserName mocks base method
func (m *MockISearchRepository) GetByUserName(q string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserName", q)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserName indicates an expected call of GetByUserName
func (mr *MockISearchRepositoryMockRecorder) GetByUserName(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserName", reflect.TypeOf((*MockISearchRepository)(nil).GetByUserName), q)
}

// GetByTagName mocks base method
func (m *MockISearchRepository) GetByTagName(q string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTagName", q)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTagName indicates an expected call of GetByTagName
func (mr *MockISearchRepositoryMockRecorder) GetByTagName(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTagName", reflect.TypeOf((*MockISearchRepository)(nil).GetByTagName), q)
}
