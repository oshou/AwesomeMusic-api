// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/oshou/AwesomeMusic-api/api/domain/model"
	reflect "reflect"
)

// MockITagRepository is a mock of ITagRepository interface
type MockITagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITagRepositoryMockRecorder
}

// MockITagRepositoryMockRecorder is the mock recorder for MockITagRepository
type MockITagRepositoryMockRecorder struct {
	mock *MockITagRepository
}

// NewMockITagRepository creates a new mock instance
func NewMockITagRepository(ctrl *gomock.Controller) *MockITagRepository {
	mock := &MockITagRepository{ctrl: ctrl}
	mock.recorder = &MockITagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITagRepository) EXPECT() *MockITagRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockITagRepository) List() ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockITagRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockITagRepository)(nil).List))
}

// ListByName mocks base method
func (m *MockITagRepository) ListByName(tagName string) ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", tagName)
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByName indicates an expected call of ListByName
func (mr *MockITagRepositoryMockRecorder) ListByName(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockITagRepository)(nil).ListByName), tagName)
}

// ListByPostID mocks base method
func (m *MockITagRepository) ListByPostID(postID int) ([]*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPostID", postID)
	ret0, _ := ret[0].([]*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPostID indicates an expected call of ListByPostID
func (mr *MockITagRepositoryMockRecorder) ListByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPostID", reflect.TypeOf((*MockITagRepository)(nil).ListByPostID), postID)
}

// GetByID mocks base method
func (m *MockITagRepository) GetByID(tagID int) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", tagID)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockITagRepositoryMockRecorder) GetByID(tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITagRepository)(nil).GetByID), tagID)
}

// Add mocks base method
func (m *MockITagRepository) Add(tagName string) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tagName)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockITagRepositoryMockRecorder) Add(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockITagRepository)(nil).Add), tagName)
}

// Attach mocks base method
func (m *MockITagRepository) Attach(postID, tagID int) (*model.PostTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", postID, tagID)
	ret0, _ := ret[0].(*model.PostTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach
func (mr *MockITagRepositoryMockRecorder) Attach(postID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockITagRepository)(nil).Attach), postID, tagID)
}
