// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/oshou/AwesomeMusic-api/api/domain/model"
	reflect "reflect"
)

// MockIPostUsecase is a mock of IPostUsecase interface
type MockIPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIPostUsecaseMockRecorder
}

// MockIPostUsecaseMockRecorder is the mock recorder for MockIPostUsecase
type MockIPostUsecaseMockRecorder struct {
	mock *MockIPostUsecase
}

// NewMockIPostUsecase creates a new mock instance
func NewMockIPostUsecase(ctrl *gomock.Controller) *MockIPostUsecase {
	mock := &MockIPostUsecase{ctrl: ctrl}
	mock.recorder = &MockIPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPostUsecase) EXPECT() *MockIPostUsecaseMockRecorder {
	return m.recorder
}

// ListPosts mocks base method
func (m *MockIPostUsecase) ListPosts() ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts")
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts
func (mr *MockIPostUsecaseMockRecorder) ListPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockIPostUsecase)(nil).ListPosts))
}

// ListPostsByTagID mocks base method
func (m *MockIPostUsecase) ListPostsByTagID(tagID int) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByTagID", tagID)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByTagID indicates an expected call of ListPostsByTagID
func (mr *MockIPostUsecaseMockRecorder) ListPostsByTagID(tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByTagID", reflect.TypeOf((*MockIPostUsecase)(nil).ListPostsByTagID), tagID)
}

// ListPostsByUserID mocks base method
func (m *MockIPostUsecase) ListPostsByUserID(userID int) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByUserID", userID)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByUserID indicates an expected call of ListPostsByUserID
func (mr *MockIPostUsecaseMockRecorder) ListPostsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByUserID", reflect.TypeOf((*MockIPostUsecase)(nil).ListPostsByUserID), userID)
}

// GetPostByID mocks base method
func (m *MockIPostUsecase) GetPostByID(postID int) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID
func (mr *MockIPostUsecaseMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockIPostUsecase)(nil).GetPostByID), postID)
}

// AddPost mocks base method
func (m *MockIPostUsecase) AddPost(userID int, title, url, message string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", userID, title, url, message)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost
func (mr *MockIPostUsecaseMockRecorder) AddPost(userID, title, url, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockIPostUsecase)(nil).AddPost), userID, title, url, message)
}

// DeletePostByID mocks base method
func (m *MockIPostUsecase) DeletePostByID(postID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostByID", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostByID indicates an expected call of DeletePostByID
func (mr *MockIPostUsecaseMockRecorder) DeletePostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostByID", reflect.TypeOf((*MockIPostUsecase)(nil).DeletePostByID), postID)
}
