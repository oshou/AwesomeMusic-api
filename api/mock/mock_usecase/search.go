// Code generated by MockGen. DO NOT EDIT.
// Source: search.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/oshou/AwesomeMusic-api/api/domain/model"
	reflect "reflect"
)

// MockISearchUsecase is a mock of ISearchUsecase interface
type MockISearchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISearchUsecaseMockRecorder
}

// MockISearchUsecaseMockRecorder is the mock recorder for MockISearchUsecase
type MockISearchUsecaseMockRecorder struct {
	mock *MockISearchUsecase
}

// NewMockISearchUsecase creates a new mock instance
func NewMockISearchUsecase(ctrl *gomock.Controller) *MockISearchUsecase {
	mock := &MockISearchUsecase{ctrl: ctrl}
	mock.recorder = &MockISearchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISearchUsecase) EXPECT() *MockISearchUsecaseMockRecorder {
	return m.recorder
}

// ListPostsByTitle mocks base method
func (m *MockISearchUsecase) ListPostsByTitle(q string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByTitle", q)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByTitle indicates an expected call of ListPostsByTitle
func (mr *MockISearchUsecaseMockRecorder) ListPostsByTitle(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByTitle", reflect.TypeOf((*MockISearchUsecase)(nil).ListPostsByTitle), q)
}

// ListPostsByUserName mocks base method
func (m *MockISearchUsecase) ListPostsByUserName(q string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByUserName", q)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByUserName indicates an expected call of ListPostsByUserName
func (mr *MockISearchUsecaseMockRecorder) ListPostsByUserName(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByUserName", reflect.TypeOf((*MockISearchUsecase)(nil).ListPostsByUserName), q)
}

// ListPostsByTagName mocks base method
func (m *MockISearchUsecase) ListPostsByTagName(q string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByTagName", q)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByTagName indicates an expected call of ListPostsByTagName
func (mr *MockISearchUsecaseMockRecorder) ListPostsByTagName(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByTagName", reflect.TypeOf((*MockISearchUsecase)(nil).ListPostsByTagName), q)
}
